# merge NMDS scores with sampleID information for plotting
nmds_scores <- my_nmds_result %>%
vegan::scores() %>%
.[["sites"]] %>%
as.data.frame() %>%
tibble::rownames_to_column("sampleID") %>%
left_join(table_sample_info)
View(nmds_scores)
nmds_scores %>% arrange(desc(NMDS1)) %>% head()
nmds_scores %>% arrange(desc(NMDS1)) %>% tail()
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = siteID,
shape = samplerType)) +
geom_point() +
facet_wrap(~ as.factor(season))
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = as.factor(year),
shape = samplerType)) +
geom_point() +
facet_grid(season ~ siteID, scales = "free")
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = as.factor(season),
shape = samplerType)) +
geom_point() +
facet_grid(year ~ siteID, scales = "free")
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = as.factor(season),
shape = samplerType)) +
geom_point() +
facet_grid(siteID ~ season, scales = "free")
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = as.factor(siteID))) +
geom_point() +
facet_grid(year ~ season, scales = "free")
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = as.factor(siteID))) +
geom_point() +
facet_grid(year ~ as.factor(season), scales = "free")
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = as.factor(siteID))) +
geom_point() +
facet_grid(season~year, scales = "free")
nmds_scores %>%
ggplot(aes(NMDS1, NMDS2, color = as.factor(season),
shape = samplerType)) +
geom_point() +
facet_grid(siteID ~ year, scales = "free")
table_observation_richness<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = count(order, na.rm = TRUE))
table_observation_richness<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = sum(order, na.rm = TRUE))
rlang::last_trace()
rlang::last_trace()
table_observation_richness<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = n(order), na.rm = TRUE))
table_observation_richness<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = n(), na.rm = TRUE))
table_observation_richness<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = n(), .groups = "drop"))
table_observation_richness<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = n(), na.rm = TRUE)
table_observation_richness<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = n(), .groups = "drop")
View(readme_20120)
View(table_observation_richness)
taxa_richness <- table_observation_richness %>%
select(siteID, habitatType, season, year, order) %>%
group_by(eventID) %>%
summarise(RICHNESS = n_distinct(order))
taxa_richness <- table_observation_richness %>%
select(siteID, habitatType, season, year, order) %>%
group_by(order) %>%
summarise(RICHNESS = n_distinct(order))
View(taxa_richness)
taxa_richness <- table_observation_richness %>%
select(siteID, habitatType, season, year) %>%
group_by(eventID,order) %>%
summarise(RICHNESS = n_distinct(order))
table_observation_abundance<-table_observation %>%
filter(!is.na(order)) %>%
group_by(siteID, year,eventID,habitatType, order, season) %>%
summarize(order_count = n(), .groups = "drop")
View(table_observation)
taxa_richness <- table_observation %>%
group_by(siteID, eventID) %>%
summarise(order_richness = n_distinct(order))
View(taxa_richness)
taxa_richness <- table_observation %>%
group_by(siteID, eventID,season, year) %>%
summarise(order_richness = n_distinct(order))
View(taxa_richness)
taxa_richness <- table_observation %>%
group_by(siteID, eventID,season, year,order) %>%
summarise(order_richness = n_distinct(order))
taxa_richness <- table_observation %>%
group_by(siteID, eventID,season, year) %>%
summarise(order_richness = n_distinct(order))
View(taxa_richness)
View(taxa_occurrence_summary)
View(table_observation_abundance)
shannon<-ddply(bmatrix,~siteID,function(x) {data.frame(SHANNON=diversity(x[-1], index="shannon"))})
?ddply
library(dbplyr)
shannon<-dbply(bmatrix,~siteID,function(x) {data.frame(SHANNON=diversity(x[-1], index="shannon"))})
shannon<-dbplyr(bmatrix,~siteID,function(x) {data.frame(SHANNON=diversity(x[-1], index="shannon"))})
shannon<-dbplyr(taxa_richness,~siteID,function(x) {data.frame(SHANNON=diversity(x[-1], index="shannon"))})
shannon<-table_observation_abundance %>%
group_by(siteID)%>%
summarize(SHANNON=diversity, index="shannon"))
shannon<-table_observation_abundance %>%
group_by(siteID)%>%
summarize(SHANNON = diversity(across(-siteID), index = "shannon"))
shannon<-table_observation_abundance %>%
group_by(siteID)%>%
summarize(SHANNON = diversity(across(-siteID), index = "shannon"))
View(table_sample_by_taxon_density_wide)
table_event_by_taxon_abundance_long<-table_observation_abundance %>%
distinct() %>%
filter(!is.na(order_count))
View(table_event_by_taxon_abundance_long)
table_event_by_taxon_abundance_wide<-table_observation_abundance %>%
tidyr::pivot_wider(id_cols=eventID,
names_from = order,
values_from= order_count,
values_fill = list(order_count=0),
values_fn=list(order_count=sum)) %>%
column_to_rownames(var="eventID")
View(table_event_by_taxon_abundance_wide)
# check col and row sums -- mins should all be > 0
colSums(table_event_by_taxon_abundance_wide) %>% min()
rowSums(table_event_by_taxon_abundance_wide) %>% min()
shannon<-table_event_by_taxon_abundance_wide %>%
group_by(eventID)%>%
summarize(SHANNON = diversity(across(-eventID), index = "shannon"))
shannon<-table_event_by_taxon_abundance_wide %>%
group_by(rownames)%>%
summarize(SHANNON = diversity(across(-rownames), index = "shannon"))
shannon<-table_event_by_taxon_abundance %>%
group_by(eventID)%>%
summarize(SHANNON = diversity(across(-siteID), index = "shannon"))
shannon<-table_event_by_taxon_abundance %>%
group_by(siteID)%>%
summarize(SHANNON = diversity(across(-siteID), index = "shannon"))
shannon<-table_observation_abundance %>%
group_by(siteID)%>%
summarize(SHANNON = diversity(across(-siteID), index = "shannon"))
library(vegan)
shannon<-table_observation_abundance %>%
group_by(siteID)%>%
summarize(SHANNON = diversity(across(-siteID), index = "shannon"))
shannon<-table_observation_abundance %>%
group_by(eventID)%>%
summarize(SHANNON = diversity(across(-eventID), index = "shannon"))
View(table_observation)
library(plyr)
ddplyr(table_observation, ~eventID, function(x){
data.frame(richness=sum(x[1]>0))
})
shannon<-ddplyr(table_observation, ~eventID, function(x){
data.frame(richness=sum(x[1]>0))
})
install.packages(plyr)
install.packages("plyr")
shannon<-plyr::ddplyr(table_observation, ~eventID, function(x){
data.frame(richness=sum(x[1]>0))
})
shannon<-plyr::ddply(table_observation, ~eventID, function(x){
data.frame(richness=sum(x[1]>0))
})
View(shannon)
shannon2<-table_observation %>%
group_by(eventID, order)%>%
summarize(SHANNON = diversity(across(-eventID), index = "shannon"))
shannon2<-table_observation %>%
group_by(eventID, order)%>%
summarize(SHANNON = diversity(order), index = "shannon")
shannon2<-table_observation %>%
group_by(eventID, order)%>%
summarize(SHANNON = diversity(SHANNON=diversity(x[-1], index="shannon")))
shannon<-table_observation %>%
group_by(eventID, order)%>%
plyr::ddply(table_observation, ~eventID, function(x){
data.frame(richness=sum(x[-1]>0))
})
shannon<-table_observation %>%
plyr::ddply(table_observation, ~eventID, function(x){
data.frame(richness=sum(x[-1]>0))
})
View(taxa_richness)
install.packages("Kendall")
install.packages("trend")
detach("package:plyr", unload = TRUE)
detach("package:dbplyr", unload = TRUE)
library(dbplyr)
library(plyr)
library(trend)
library(Kendall)
setwd("C:/mviggiano/Documents/GitHub/Mvviggi")
install.packages("raster")
library(tidyverse)
install.packages("sf")
library(sf)
install.packages("here")
library(here)
library(sf)
options(digits = 3)
set.seed(1234)
theme_set(theme_minimal())
usa <- here(
"static", "data", "census_bureau",
"cb_2013_us_state_20m", "cb_2013_us_state_20m.shp"
) %>%
st_read()
install.packages("ggmap")
install.packages("RColorBrewer")
install.packages("patchwork")
library(ggmap)
library(RColorBrewer)
library(patchwork)
PRmap <- c(
left= "18.16527",
right ="18.278845",
top= "-66.506754",
bottom="-66.460281")
pr_stamen <- get_stamenmap(
bbox = PRmap,
zoom = 11
)
pr_stamen <- get_stadiamap(
bbox = PRmap,
zoom = 11
)
PRmap <- c(
left= -66.46024,
right =18.61325,
top= -66.433081,
bottom=17.816815)
pr_stamen <- get_stadiamap(
bbox = PRmap,
zoom = 11
)
pr_stamen <- get_openstreetmap(
scale = 606250
bbox = PRmap
pr_stamen <- get_openstreetmap(
scale = 606250,
bbox = PRmap
)
pr_stamen <- get_openstreetmap(
bbox = PRmap
)
library(ggspatial)
library(ggthemes)
library(raster)
PRmap <- c(
left= -67.318529,
right =-65.579208,
top= 18.768341,
bottom=17.847233)
pr_stamen <- get_stamenmap(
bbox = PRmap,
zoom = 10, # Adjust zoom level based on desired detail
maptype = "toner" # Options: "terrain", "watercolor", "toner"
)
pr_stadia <- get_stadiamap(
bbox = PRmap,
zoom = 10, # Adjust zoom level based on desired detail
maptype = "outdoors" # Options include "outdoors", "alidade_smooth", etc.
)
rlang::last_trace()
stadia_token="ba5b3918-0cc4-4b77-8c78-2acc3a72e440"
stadia_token="ba5b3918-0cc4-4b77-8c78-2acc3a72e440"
# Register your Stadia Maps API key
register_stadiamaps(key = stadia_token)
# Define the bounding box for Puerto Rico
PRmap <- c(left = -67.318529, bottom = 17.847233, right = -65.579208, top = 18.768341)
# Retrieve the map using the Stadia Maps source
pr_stadia <- get_stadiamap(
bbox = PRmap,
zoom = 10, # Adjust zoom level based on desired detail
maptype = "outdoors" # Options include "outdoors", "alidade_smooth", etc.
)
# Plot the map
ggmap(pr_stadia)
# Define the bounding box for Puerto Rico
PRmap <- c(left = -67.318529, bottom = 17.847233, right = -65.523516, top = 18.490656)
pr_stadia <- get_stadiamap(
bbox = PRmap,
zoom = 10, # Adjust zoom level based on desired detail
maptype = "outdoors" # Options include "outdoors", "alidade_smooth", etc.
)
# Plot the map
ggmap(pr_stadia)
# Define the bounding box for Puerto Rico
PRmap <- c(left = -67.318529, bottom = 17.847233, right = -65.565716, top = 18.516663)
# Retrieve the map using the Stadia Maps source
pr_stadia <- get_stadiamap(
bbox = PRmap,
zoom = 10, # Adjust zoom level based on desired detail
maptype = "outdoors" # Options include "outdoors", "alidade_smooth", etc.
)
# Plot the map
ggmap(pr_stadia)
# Plot the map
ggmap(pr_stadia)
library(sf)
library(here)
library(ggmap)
library(RColorBrewer)
library(patchwork)
# Register your Stadia Maps API key
register_stadiamaps(key = stadia_token)
options(digits = 3)
set.seed(1234)
theme_set(theme_minimal())
# Define the bounding box for Puerto Rico
PRmap <- c(left = -67.318529, bottom = 17.847233, right = -65.565716, top = 18.516663)
# Retrieve the map using the Stadia Maps source
pr_stadia <- get_stadiamap(
bbox = PRmap,
zoom = 10, # Adjust zoom level based on desired detail
maptype = "outdoors" # Options include "outdoors", "alidade_smooth", etc.
)
# Plot the map
ggmap(pr_stadia)
install.packages("dslabs")
library(dslabs)
data(murders)
force(murders)
data(heights)
head(heights)
data(sex,height)
data(heights)
force(heights)
head(heights)
colnames(heights)[2,3]<- "sex", "height"
str(heights)
colnames(heights)<-c("sex", "height")
head(heights)
heights<-colnames()
names(heights)
table(x)
x <- heights$height
table(x)
tab<-table(x)
length(unique(x)) #see how many values are unque for the heights column
sum(tab==1)
###############******###########
#Assessment 1.2
library(dplyr)
library(ggplot2)
ds_theme_set()
murders %>% group_by(region) %>%
summarize(n = n()) %>%
mutate(Proportion = n/sum(n),
region = reorder(region, Proportion)) %>%
ggplot(aes(x=region, y=Proportion, fill=region)) +
geom_bar(stat = "identity", show.legend = FALSE) +
xlab("")
murders %>% group_by(region) %>%
summarize(n = n()) %>%
mutate(Proportion = n/sum(n),
region = reorder(region, Proportion)) %>%
ggplot(aes(x=region, y=Proportion, fill=region)) +
geom_bar(stat = "identity", show.legend = FALSE) +
xlab("")
heights %>% filter(sex=="Male") %>% ggplot(aes(height)) +
stat_ecdf() +
ylab("F(a)") + xlab("a")
murders %>% mutate(murder_rate = total/population * 10^5) %>%
ggplot(aes(murder_rate)) +
stat_ecdf() +
ylab("F(a)") + xlab("a")
View(murders)
murder_rate<-
murders %>% mutate(murder_rate = total/population * 10^5)
View(murder_rate)
str(murder_rate$murder_rate)
summary(murder_rate$murder_rate)
heights %>%
filter(sex=="Male") %>%
ggplot(aes(height)) +
geom_histogram(binwidth = 1, color = "black")
male_count<- heights%>%
filter(sex=="Male", height > 62.5, height < 65.5) %>%
count()
View(male_count)
murders %>%
ggplot(aes(x=population/10^6)) +
geom_density(fill = "grey") +
scale_x_log10() +
xlab("Population in millions")
library(gridExtra)
p1 <- murders %>% ggplot(aes(x=population/10^6)) + geom_density(fill = "grey", bw = 5) + xlab("Population in millions") + ggtitle("1")
p2 <- murders %>% ggplot(aes(x=population/10^6)) + geom_density(fill = "grey", bw = .05) + scale_x_log10() + xlab("Population in millions") + ggtitle("2")
p3 <- murders %>% ggplot(aes(x=population/10^6)) + geom_density(fill = "grey", bw = 1) + scale_x_log10() + xlab("Population in millions") + ggtitle("3")
grid.arrange(p1,p2,p3,ncol=2)
index <- heights$sex=="Male"
x <- heights$height[index]
# calculate the mean and standard deviation manually
average <- sum(x)/length(x)
SD <- sqrt(sum((x - average)^2)/length(x))
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
SD <- sd(x)
c(average = average, SD = SD)
# calculate standard units
z <- scale(x)
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 2)
x <- heights$height[heights$sex == "Male"]
proportion <- mean(x > 69 & x <= 72)
mean(x > 69 & x <= 72)
avg <- mean(x)
stdev <- sd(x)
mean(x)
library(tidyverse)
library(dslabs)
data(heights)
index <- heights$sex=="Male"
x <- heights$height[index]
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
x <- heights$height[heights$sex == "Male"]
mean(x > 69 & x <= 72)
mean(x)
sd(x)
mu = 69  # mean
sigma = 3  # standard deviation
x = 84  # threshold
# Calculate the proportion taller than 84 inches
proportion = 1 - norm.cdf(x, mu, sigma)
# Calculate the proportion taller than 84 inches
proportion = 1 - pnorm(x, mu, sigma)
print("Proportion taller than 84 inches:", proportion)
print(proportion)
pnorm(84,69,3)
1- pnorm(84,69,3)
# Filter male heights and compute mean and standard deviation
x <- heights$height[heights$sex == "Male"]
mu <- mean(x)
sigma <- sd(x)
# Exact proportion
exact <- mean(x > 79 & x <= 81)
# Approximation using the normal distribution
approx <- pnorm(81, mu, sigma) - pnorm(79, mu, sigma)
# Ratio of exact to approximate value
ratio <- exact / approx
mean<-sum(x)/length(x)
print(mean)
sd<-sqrt(sum((x - average)^2)/length(x))
print(sd)
approx <- pnorm(81, mean(x), sd(x)) - pnorm(79,mean(x), sd(x))
print(approx)
(mean(x > 79 & x <= 81))/approx
today()
library(tidyverse)
today()
getwd()
setwd("~/GitHub/Fisheries")
print(100 / 10)
medianCPUE_reach <- CPUE %>%
filter(pass == c("1")) %>%
ggplot(aes(x = collectDate, y= total, fill = season)) +
stat_summary(fun.data = mean_se, geom = "errorbar")+
stat_summary(fun.data = mean_se, geom = "bar")+
facet_wrap(~site, nrow= 2, scale = "free") +
labs(x= NULL,
y = "Mean total for single pass per sampling date")
library(dplyr)
library(tidyr)
skim_without_charts()
? skim_without_charts()
install.packages("ToothGrowth")
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
palmerpenguins
view(palmerpenguins)
library(palmerpenguins)
data(palmerpenguins)
install.packages(“palmerpenguins”)
install.packages(“palmerpenguins”)
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
setwd("C:/Users/mvvb8/Documents/GitHub/Mvviggi/coursera")
setwd("C:/Users/mvvb8/Documents/GitHub/Mvviggi/coursera")
getwd()
data(palmerpenguins)
view(palmerpenguins)
data(penguins)
view(penguins)
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) + geom_jitter(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) + geom_smooth(mapping = aes(x = flipper_length_mm, y = body_mass_g))
install.packages("rmarkdown")
ggsave("penguins.png")
